# -*- coding: utf-8 -*-
import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from catboost import CatBoostClassifier
import joblib

# üìÇ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡∏Ç‡∏≠‡∏á Dataset
file_path = "datasets/zoo.csv"  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
if not os.path.exists(file_path):
    raise FileNotFoundError(f"üö® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {file_path}")

# üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_csv(file_path)

# üîπ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå animal_name ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
df = df.drop(columns=["animal_name"])

# üöÄ ‡πÅ‡∏¢‡∏Å Features ‡πÅ‡∏•‡∏∞ Target
y = df["class_type"]
X = df.drop(columns=["class_type"])

# üîπ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Train (67%) ‡πÅ‡∏•‡∏∞ Test (33%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# ----------------- üöÄ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ----------------- #
rfc = RandomForestClassifier(n_estimators=100, random_state=42)
rfc.fit(X_train, y_train)

# ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy
y_pred_rfc = rfc.predict(X_test)
accuracy_rfc = accuracy_score(y_test, y_pred_rfc)
print(f"üå≤ Random Forest Accuracy: {accuracy_rfc:.4f}")

# ----------------- üöÄ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• CatBoost ----------------- #
catboost_model = CatBoostClassifier(iterations=500, depth=6, learning_rate=0.05, loss_function='MultiClass', verbose=50, random_seed=42)
catboost_model.fit(X_train, y_train)

# ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy
y_pred_catboost = catboost_model.predict(X_test)
accuracy_catboost = accuracy_score(y_test, y_pred_catboost)
print(f"üê± CatBoost Accuracy: {accuracy_catboost:.4f}")

# üìÇ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå models ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
model_dir = "models"
os.makedirs(model_dir, exist_ok=True)

# ----------------- üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• ----------------- #
catboost_path = os.path.join(model_dir, "catboost_model.cbm")
random_forest_path = os.path.join(model_dir, "random_forest_model.pkl")

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CatBoost ‡πÉ‡∏ä‡πâ save_model()
catboost_model.save_model(catboost_path, format="cbm")
print(f"‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏• CatBoost ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {catboost_path}")

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Random Forest ‡πÉ‡∏ä‡πâ joblib
joblib.dump(rfc, random_forest_path)
print(f"‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {random_forest_path}")

# ----------------- üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ----------------- #
loaded_catboost = CatBoostClassifier()
loaded_catboost.load_model(catboost_path)

loaded_rfc = joblib.load(random_forest_path)

# ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
y_pred_loaded = loaded_catboost.predict(X_test)
accuracy_loaded = accuracy_score(y_test, y_pred_loaded)
print(f"üéØ Accuracy ‡∏Ç‡∏≠‡∏á CatBoost ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤: {accuracy_loaded:.4f}")
