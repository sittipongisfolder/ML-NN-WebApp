import streamlit as st
import pandas as pd
import joblib
import numpy as np
import catboost
import os
from catboost import CatBoostClassifier


@st.cache_resource
def load_model():
    model_path = "../models/catboost_model.cbm"
    
    if not os.path.exists(model_path):
        st.error(f"üö® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_path}")
        return None
    
    model = CatBoostClassifier()
    model.load_model(model_path, format="cbm")  # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .cbm
    return model

model = load_model()

# Mapping Class Number -> ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå
class_mapping = {
    1: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏•‡∏π‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏° (Mammal)",
    2: "‡∏ô‡∏Å (Bird)",
    3: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏∑‡πâ‡∏≠‡∏¢‡∏Ñ‡∏•‡∏≤‡∏ô (Reptile)",
    4: "‡∏õ‡∏•‡∏≤ (Fish)",
    5: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡∏Å‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ô‡πâ‡∏≥ (Amphibian)",
    6: "‡πÅ‡∏°‡∏•‡∏á (Insect)",
    7: "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏™‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á (Invertebrate)"
}

# ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Zoo Dataset ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
features = {
    "hair": "‡∏°‡∏µ‡∏Ç‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "feathers": "‡∏°‡∏µ‡∏Ç‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "eggs": "‡∏≠‡∏≠‡∏Å‡πÑ‡∏Ç‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "milk": "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ú‡∏•‡∏¥‡∏ï‡∏ô‡πâ‡∏≥‡∏ô‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "airborne": "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "aquatic": "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "predator": "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ô‡∏±‡∏Å‡∏•‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "toothed": "‡∏°‡∏µ‡∏ü‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "backbone": "‡∏°‡∏µ‡πÅ‡∏Å‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏™‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "breathes": "‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏≠‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "venomous": "‡∏°‡∏µ‡∏û‡∏¥‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "fins": "‡∏°‡∏µ‡∏Ñ‡∏£‡∏µ‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "legs": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤",
    "tail": "‡∏°‡∏µ‡∏´‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "domestic": "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "catsize": "‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
}

st.title("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏±‡∏ï‡∏ß‡πå")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå ü¶Åüê¶üê†")

# ‡∏à‡∏±‡∏î Layout ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
col1, col2 = st.columns(2)

user_input = {}

# Loop ‡∏ú‡πà‡∏≤‡∏ô features ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
for i, (feature, desc) in enumerate(features.items()):
    if feature == "legs":  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ selectbox
        user_input[feature] = st.selectbox(desc, [0, 2, 4, 5, 6, 8])
    else:
        col = col1 if i % 2 == 0 else col2
        user_input[feature] = col.radio(desc, ["‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", "‡πÉ‡∏ä‡πà"], index=0)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏•‡∏∞ 1
input_data = [1 if user_input[f] == "‡πÉ‡∏ä‡πà" else 0 for f in features if f != "legs"]
input_data.insert(12, user_input["legs"])  # ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á 'legs' ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

# ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
input_df = pd.DataFrame([input_data], columns=features.keys())

# ‡∏õ‡∏∏‡πà‡∏° Predict ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
st.markdown("<br>", unsafe_allow_html=True)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
if model:
    if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå"):
        prediction = model.predict(input_df)

        # ‚úÖ ‡πÉ‡∏ä‡πâ item() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
        if isinstance(prediction, (np.ndarray, list)):
            class_id = int(prediction[0])
        else:
            class_id = int(prediction)

        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏à‡∏≤‡∏Å class_mapping
        animal_class = class_mapping.get(class_id, "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
        
        st.success(f"üéØ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ: **{animal_class}**")
